// This file is generated by rust-protobuf 2.1.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message fields
    field_type: ::std::option::Option<Message_MessageType>,
    pingData: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // optional .ncp.pb.Message.MessageType type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Message_MessageType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    pub fn get_field_type(&self) -> Message_MessageType {
        self.field_type.unwrap_or(Message_MessageType::PING)
    }

    // optional bytes pingData = 10;

    pub fn clear_pingData(&mut self) {
        self.pingData.clear();
    }

    pub fn has_pingData(&self) -> bool {
        self.pingData.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pingData(&mut self, v: ::std::vec::Vec<u8>) {
        self.pingData = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pingData(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.pingData.is_none() {
            self.pingData.set_default();
        }
        self.pingData.as_mut().unwrap()
    }

    // Take field
    pub fn take_pingData(&mut self) -> ::std::vec::Vec<u8> {
        self.pingData.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_pingData(&self) -> &[u8] {
        match self.pingData.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                10 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.pingData)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.pingData.as_ref() {
            my_size += ::protobuf::rt::bytes_size(10, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, v.value())?;
        }
        if let Some(ref v) = self.pingData.as_ref() {
            os.write_bytes(10, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Message_MessageType>>(
                    "type",
                    |m: &Message| { &m.field_type },
                    |m: &mut Message| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "pingData",
                    |m: &Message| { &m.pingData },
                    |m: &mut Message| { &mut m.pingData },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Message>(
                    "Message",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Message {
        static mut instance: ::protobuf::lazy::Lazy<Message> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Message,
        };
        unsafe {
            instance.get(Message::new)
        }
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_pingData();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Message_MessageType {
    PING = 0,
    PONG = 1,
    GET_PEERS_REQ = 2,
    GET_PEERS_RES = 3,
}

impl ::protobuf::ProtobufEnum for Message_MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Message_MessageType> {
        match value {
            0 => ::std::option::Option::Some(Message_MessageType::PING),
            1 => ::std::option::Option::Some(Message_MessageType::PONG),
            2 => ::std::option::Option::Some(Message_MessageType::GET_PEERS_REQ),
            3 => ::std::option::Option::Some(Message_MessageType::GET_PEERS_RES),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Message_MessageType] = &[
            Message_MessageType::PING,
            Message_MessageType::PONG,
            Message_MessageType::GET_PEERS_REQ,
            Message_MessageType::GET_PEERS_RES,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Message_MessageType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Message_MessageType {
}

impl ::protobuf::reflect::ProtobufValue for Message_MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tncp.proto\x12\x06ncp.pb\"\x9f\x01\n\x07Message\x12/\n\x04type\x18\
    \x01\x20\x01(\x0e2\x1b.ncp.pb.Message.MessageTypeR\x04type\x12\x1a\n\x08\
    pingData\x18\n\x20\x01(\x0cR\x08pingData\"G\n\x0bMessageType\x12\x08\n\
    \x04PING\x10\0\x12\x08\n\x04PONG\x10\x01\x12\x11\n\rGET_PEERS_REQ\x10\
    \x02\x12\x11\n\rGET_PEERS_RES\x10\x03J\x81\x04\n\x06\x12\x04\0\0\x10\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\x0e\n\n\
    \n\x02\x04\0\x12\x04\x03\0\x10\x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\
    \x0f\n\x0c\n\x04\x04\0\x04\0\x12\x04\x04\x08\t\t\n\x0c\n\x05\x04\0\x04\0\
    \x01\x12\x03\x04\r\x18\n\r\n\x06\x04\0\x04\0\x02\0\x12\x03\x05\x10\x19\n\
    \x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x05\x10\x14\n\x0e\n\x07\x04\0\
    \x04\0\x02\0\x02\x12\x03\x05\x17\x18\n\r\n\x06\x04\0\x04\0\x02\x01\x12\
    \x03\x06\x08\x11\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03\x06\x08\x0c\
    \n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\x06\x0f\x10\n\r\n\x06\x04\0\
    \x04\0\x02\x02\x12\x03\x07\x10\"\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\
    \x03\x07\x10\x1d\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x03\x07\x20!\n\
    \r\n\x06\x04\0\x04\0\x02\x03\x12\x03\x08\x10\"\n\x0e\n\x07\x04\0\x04\0\
    \x02\x03\x01\x12\x03\x08\x10\x1d\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\
    \x03\x08\x20!\n2\n\x04\x04\0\x02\0\x12\x03\x0c\x08&\x1a%\x20defines\x20w\
    hat\x20type\x20of\x20message\x20it\x20is.\n\n\x0c\n\x05\x04\0\x02\0\x04\
    \x12\x03\x0c\x08\x10\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x11\x1c\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\x1d!\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x0c$%\nO\n\x04\x04\0\x02\x01\x12\x03\x0f\x08%\x1aB\x20defines\
    \x20what\x20coral\x20cluster\x20level\x20this\x20query/response\x20belon\
    gs\x20to.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0f\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x0f\x11\x16\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x0f\x17\x1f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f\"$\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
